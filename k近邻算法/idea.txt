---------------------------How----------------------------------
怎么才能写出一个有趣
- 有趣：那么就要避免过分的公式推导，且加入大量的例子。而且最好要有数据图的展示。
-            数据分析的内容，可以灵活的运用上去。如果可以的话。
- 如何通俗易懂呢？ 那么例子要尽可能的通俗的话描述。
- 在解释代码前，可以画流程图和写伪代码出来。
- 并对优化后的数据结果，进行分析，和统计，得出一个确定的结果。
- 疑难的问题：要重点描述，或者如果图片更好的描述的话，就用图片来描述。

#k-近邻算法（k-nearnest neighbor)KNN
#k-近邻算法
#范例
#代码实例
##实例
##改进
#总结
#附录：
    在[0]中，作者，通过分析k近邻算法耗时长最大的问题在于它是一个消极的算法，计算都在分类阶段进行，他提出了结合消极和积极的算法，通过在训练数据阶段，
选取一个基点o，并计算所有的实例对于o点的距离，这样子，并进行排序，这样子带测试实例x，和以后的所有类别都可以使用这个数据，在数据量越大的情况下，
节省的时间越多，待测数据x计算与o基点的距离，然后筛选距离k的区间，然后计算x与区间中的所有点的距离。并找出距离最近的数据作为分类。这个d和o点选取
是这个论文所没有讨论出如何选取的。同时也提及了3类改进knn算法的思路：1、更合适的距离 2、更合适的k值 3、更加精确的概率，代替投票机制，这些主要是用于提高
分类精度的，提高效率有KDTree，NBTree，是通过构造树，但是无法避免树学习过程的小分离问题，思路很清晰，但是由于预计算，所以必须在训练阶段确定一个全局相似,缺少更丰富的元素。
    在[1]中，作者通过概述k近邻的发展，如何提高精度，如何降低复杂度，主要有3个路线，一个是降低维度，就是降低计算的复杂度，要保证维度足够代表说有的空间。
第二个：是预结构，通过构建，相似邻居的树或者结构，更快的搜索树；第三个是：去除无用的数据。概述性非常强，但是缺少自己核心的思路。
    在[2]中，作者提出了一种k近邻算法的运用.
    在[3]中，作者实现了KD-tree运用在knn算法的。
    在[4]中，作者解释了kdtree的d是维度的意思，k是最近邻的意思。并讨论了kdtree的效率问题，与及如何分割数据点。如何保持kd树的平衡。创建一个优先队列，来保存最小的k个值。
    在[5]中，详细解释了k-d的术语和核心思想和伪代码。
    在[6]中，作者详细翻译了The Curse of Dimensionality in Classification中的文章，说明了维度灾难和如何避免维度灾难：产生：当维度急剧增长时，可用数据变得很稀疏，对于依赖统计分析的算法都是一个问题。因为大部分的数据都会在边角处，不好分类，同时
稀疏的数据分布导致了高维的数据量要以指数递增才能保证它的正确性。如何避免灾难。
    在[7]中，作者描述了，加权knn的的意义，使得k值的选取不是那么的重要，避免了不合适的k值引起的误差，对k个值进行距离权重的加权（加常数），最简单的思想是距离的倒数，文中使用高斯函数来加权。
-----------------------------------------
[0]一种改进的k近邻算法
http://read.pudn.com/downloads191/doc/900685/%E4%B8%80%E7%A7%8D%E6%8F%90%E9%AB%98K_%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95%E6%95%88%E7%8E%87%E7%9A%84%E6%96%B0%E7%AE%97%E6%B3%95.pdf
[1]基于K近邻的分类算法研究
http://xueshu.baidu.com/s?wd=paperuri%3A%286bc715711339aa21815fa7cedf80ef62%29&filter=sc_long_sign&tn=SE_xueshusource_2kduw22v&sc_vurl=http%3A%2F%2Fwenku.baidu.com%2Fview%2F76ca015ef78a6529647d5383.html&ie=utf-8&sc_us=6349279941802141378
[2]基于K近邻的新话题热度预测算法
http://www.cqvip.com/read/read.aspx?id=42784438
[3]K-D TREE算法原理及实现
https://leileiluoluo.com/posts/kdtree-algorithm-and-implementation.html
[4]kd树和最近邻居搜索
https://gopalcdas.com/2017/05/24/construction-of-k-d-tree-and-using-it-for-nearest-neighbour-search/
[5]K-dimensional tree
http://jiehust.github.io/data%20structure/2015/02/08/Kd-tree/
[6]机器学习中的维度灾难
https://zhuanlan.zhihu.com/p/26945814
[7]k最邻近算法——加权kNN
https://www.cnblogs.com/bigmonkey/p/7387943.html
